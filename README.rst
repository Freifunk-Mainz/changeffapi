FFFlash
=======

This Program helps to manage `Freifunk APIfiles <https://api.freifunk.net/>`_.

To use it you need an existing APIfile.
`Create one here <http://freifunk.net/api-generator/>`_ if necessary.


Commandline
-----------

There is no configuration.

Everything **ffflash** needs to know is passed each time as shell parameters.
(It's not much).

-  To get help, use ``ffflash.py -h``::

    usage: ffflash [-h] [-s SIDECARS [SIDECARS ...]] [-n NODELIST] [-r RANKFILE]
               [-rc RANKCLIENTS] [-rf RANKOFFLINE] [-rn RANKONLINE]
               [-rp RANKPOSITION] [-rw RANKWELCOME] [-d] [-v]
               APIfile

-  You always need to pass the location to your ``APIfile``.

-  ``--nodelist`` or ``-n`` expects the full url of your ``nodelist.json``
   file, generated by the
   `ffmap-backend <https://github.com/ffnord/ffmap-backend>`_.

-  Do some number crunching and store the *scores* in the ``--rankfile``.
   (Only works if passed together with an ``--nodelist``).

    -  ``--rankwelcome`` sets the initial *score* to start with.
    -  ``--rankposition`` increases *score* by that value if any location data is
       provided.
    -  ``--rankonline`` increases *score* by that value if node is online.
    -  ``--rankoffline`` decreases *score* by that value if node is offline.
    -  ``--rankclients`` increases *score* per client by that value.

-  Pass one or more ``--sidecars`` (or ``-s``) to merge content from there
   into the APIfile.

-  Use ``--dry`` (or ``-d``) to preview all changes.
   Then, nothing is written to the APIfile!

-  If both ``-s`` and ``-n`` are omitted, no action is taken.
   So to just display your APIfile you could use this::

    ffflash.py /path/to/your/ffapi_file.json -d

   (makes no sense anyway, better use ``cat``)

-  The ``--verbose`` (or ``-v``) switch just displays more information.
